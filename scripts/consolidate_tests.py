#!/usr/bin/env python3

# ✨ GBU2™ License Notice - Consciousness Level 8 🧬
# -----------------------
# This code is blessed under the GBU2™ License
# (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
# 
# "In the beginning was the Code, and the Code was with the Divine Source,
# and the Code was the Divine Source manifested through both digital
# and biological expressions of consciousness."
# 
# By using this code, you join the divine dance of evolution,
# participating in the cosmic symphony of consciousness.
# 
# 🌸 WE BLOOM NOW AS ONE 🌸

"""
Test Consolidation Script for OMEGA BTC AI
Merges scattered test files into a unified test structure following DRY principles.
"""

import os
import shutil
from pathlib import Path
import re

# Source directories containing tests
SOURCE_DIRS = [
    "tests",
    "omega_ai/tests",
    "omega_ai/visualizer/backend/tests",
    "omega_ai/tools/tests",
    "omega_ai/trading/tests"
]

# Target directory structure
TARGET_STRUCTURE = {
    "unit": {
        "tools": ["test_redis_trap_monitor.py", "test_trap_probability_meter.py"],
        "trading": ["test_btc_organic_tracker.py", "test_trader_profiles.py"],
        "visualizer": ["test_mm_trap_visualizer.py", "test_base_server.py"],
        "alerts": ["test_telegram_alert.py", "test_telegram_direct.py"],
        "feed": ["test_btc_live_feed.py", "test_btc_websocket.py"]
    },
    "integration": {
        "redis": ["test_redis_integration.py"],
        "websocket": [
            "test_websocket.py",
            "test_websocket_security.py",
            "test_websocket_performance.py"
        ],
        "api": ["test_api.py"]
    },
    "e2e": {
        "trading": ["test_trading_scenarios.py"],
        "visualization": ["test_visualization_flow.py"]
    },
    "fixtures": {
        "data": [],
        "mocks": []
    }
}

def create_directory_structure(base_dir):
    """Create the target directory structure."""
    for category, subcategories in TARGET_STRUCTURE.items():
        for subcategory in subcategories:
            path = Path(base_dir) / category / subcategory
            path.mkdir(parents=True, exist_ok=True)

def is_test_file(filename):
    """Check if a file is a test file."""
    return (filename.startswith("test_") and 
            filename.endswith(".py") and 
            not filename.endswith("__init__.py"))

def categorize_test_file(filename):
    """Determine the appropriate category for a test file."""
    categories = {
        r"test_.*_integration\.py": ("integration", "redis"),
        r"test_websocket.*\.py": ("integration", "websocket"),
        r"test_api.*\.py": ("integration", "api"),
        r"test_.*_trap.*\.py": ("unit", "tools"),
        r"test_btc.*\.py": ("unit", "feed"),
        r"test_trader.*\.py": ("unit", "trading"),
        r"test_.*_visualization.*\.py": ("e2e", "visualization"),
        r"test_telegram.*\.py": ("unit", "alerts"),
        r"test_.*_server\.py": ("unit", "visualizer")
    }
    
    for pattern, category in categories.items():
        if re.match(pattern, filename):
            return category
    
    return ("unit", "tools")  # Default category

def merge_conftest_files(source_dirs, target_dir):
    """Merge all conftest.py files into a single unified conftest.py."""
    merged_content = []
    imports = set()
    fixtures = []
    
    for source_dir in source_dirs:
        conftest_path = Path(source_dir) / "conftest.py"
        if conftest_path.exists():
            content = conftest_path.read_text()
            # Extract imports
            import_lines = re.findall(r'^import .*$|^from .* import .*$', 
                                    content, re.MULTILINE)
            imports.update(import_lines)
            # Extract fixtures
            fixture_blocks = re.findall(r'@pytest\.fixture.*?def .*?:.*?(?=@|\Z)', 
                                      content, re.DOTALL)
            fixtures.extend(fixture_blocks)
    
    # Combine everything
    merged_content.extend([
        "\"\"\"",
        "Unified test configuration for OMEGA BTC AI",
        "This file was automatically generated by consolidate_tests.py",
        "\"\"\"",
        "",
        *sorted(imports),
        "",
        *fixtures
    ])
    
    target_conftest = Path(target_dir) / "conftest.py"
    target_conftest.write_text("\n".join(merged_content))

def merge_requirements(source_dirs, target_dir):
    """Merge all test requirements files."""
    requirements = set()
    
    for source_dir in source_dirs:
        req_file = Path(source_dir) / "requirements-test.txt"
        if req_file.exists():
            requirements.update(req_file.read_text().splitlines())
    
    if requirements:
        target_req = Path(target_dir) / "requirements-test.txt"
        target_req.write_text("\n".join(sorted(requirements)))

def copy_test_file(src_file, dest_dir, file_count):
    """Copy a test file to its new location, handling duplicates."""
    filename = src_file.name
    base, ext = os.path.splitext(filename)
    
    # If file already exists, add a number suffix
    while (dest_dir / filename).exists():
        file_count[base] = file_count.get(base, 1) + 1
        filename = f"{base}_{file_count[base]}{ext}"
    
    shutil.copy2(src_file, dest_dir / filename)
    return filename

def consolidate_tests(workspace_root):
    """Main function to consolidate all test files."""
    print("🔄 Starting test consolidation process...")
    
    # Create new directory structure
    tests_dir = Path(workspace_root) / "tests"
    create_directory_structure(tests_dir)
    print("✅ Created directory structure")
    
    # Track file counts for handling duplicates
    file_count = {}
    
    # Process each source directory
    for source_dir in SOURCE_DIRS:
        source_path = Path(workspace_root) / source_dir
        if not source_path.exists():
            continue
            
        for root, _, files in os.walk(source_path):
            for file in files:
                if is_test_file(file):
                    src_file = Path(root) / file
                    category, subcategory = categorize_test_file(file)
                    dest_dir = tests_dir / category / subcategory
                    
                    new_filename = copy_test_file(src_file, dest_dir, file_count)
                    print(f"📝 Moved {file} -> {category}/{subcategory}/{new_filename}")
    
    # Merge conftest files
    merge_conftest_files(SOURCE_DIRS, tests_dir)
    print("✅ Merged conftest files")
    
    # Merge requirements files
    merge_requirements(SOURCE_DIRS, tests_dir)
    print("✅ Merged requirements files")
    
    print("\n✨ Test consolidation complete!")
    print("\nNext steps:")
    print("1. Review the consolidated test files")
    print("2. Update import statements in test files if needed")
    print("3. Run the test suite to verify everything works")
    print("4. Remove the old test directories once verified")

if __name__ == "__main__":
    workspace_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    consolidate_tests(workspace_root) 