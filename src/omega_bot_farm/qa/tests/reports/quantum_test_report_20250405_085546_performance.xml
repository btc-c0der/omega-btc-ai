<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="6" time="0.462" timestamp="2025-04-05T08:55:46.844571+02:00" hostname="Faustos-MacBook-Pro.local"><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_performance" name="test_model_initialization_time" time="0.001" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_performance" name="test_test_generation_performance" time="0.129" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_performance" name="test_anomaly_detection_performance" time="0.026"><failure message="ZeroDivisionError: float division by zero">ai_model = &lt;src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumAIKnowledgeModel object at 0x107e2e850&gt;
large_code_sample = "variable_1 = 1 * 2\nvariable_2 = 2 * 2\nvariable_3 = 3 * 2\nvariable_4 = 4 * 2\ndef test_function_5(x, y):\n    '''Fu...9 = 999 * 2\nclass TestClass100:\n    def __init__(self):\n        self.value = 1000\n        self.name = 'Class100'\n"

    def test_anomaly_detection_performance(ai_model, large_code_sample):
        """Test the performance of anomaly detection."""
        # Measure execution time for different code sizes
        code_sizes = [10, 100, 500, 1000]
        times = []
    
        for size in code_sizes:
            # Get a slice of the code
            code_slice = "\n".join(large_code_sample.split("\n")[:size])
    
            # Measure time
            time_taken = measure_execution_time(ai_model.detect_code_anomalies, code_slice)
            times.append(time_taken)
    
            print(f"Anomaly detection time for {size} lines: {time_taken:.4f} seconds")
    
        # Create a performance graph
        reports_dir = os.path.join(os.path.dirname(__file__), "reports")
        os.makedirs(reports_dir, exist_ok=True)
    
        plot_performance_results(
            "Anomaly Detection Performance",
            [f"{size} lines" for size in code_sizes],
            times,
            "Time (seconds)",
            os.path.join(reports_dir, "anomaly_detection_performance.png")
        )
    
        # Check scaling - should be sub-quadratic
&gt;       scaling_factor = times[-1] / times[0]
E       ZeroDivisionError: float division by zero

src/omega_bot_farm/qa/tests/test_quantum_ai_performance.py:189: ZeroDivisionError</failure></testcase><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_performance" name="test_memory_usage" time="0.085" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_performance" name="test_model_save_load_performance" time="0.022" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_performance" name="test_parallel_dimensional_analysis" time="0.000" /></testsuite></testsuites>