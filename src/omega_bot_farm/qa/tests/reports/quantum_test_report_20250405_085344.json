{
  "timestamp": "2025-04-05T08:53:49.057934",
  "total_tests": 3,
  "passed_tests": 1,
  "failed_tests": 2,
  "total_execution_time": 4.6193037033081055,
  "results": {
    "unit": {
      "success": false,
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- /Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src/omega_bot_farm/qa/venv/bin/python3.13\ncachedir: .pytest_cache\nmetadata: {'Python': '3.13.2', 'Platform': 'macOS-15.3.1-arm64-arm-64bit-Mach-O', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.5.0'}, 'Plugins': {'html': '4.1.1', 'metadata': '3.1.1', 'cov': '6.1.0'}, 'AWS_REGION': 'us-east-1'}\nrootdir: /Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src\nconfigfile: pytest.ini\nplugins: html-4.1.1, metadata-3.1.1, cov-6.1.0\ncollecting ... collected 27 items\n\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_dimension_init PASSED [  3%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_dimension_measure PASSED [  7%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_dimension_measure_state_change PASSED [ 11%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_dimension_to_dict PASSED [ 14%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_ai_model_init PASSED [ 18%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_ai_model_to_dict PASSED [ 22%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_ai_model_from_dict PASSED [ 25%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_test_generator_init PASSED [ 29%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_test_generator_generate_test PASSED [ 33%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_test_generator_to_dict PASSED [ 37%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_anomaly_detector_init PASSED [ 40%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_anomaly_detector_detect_anomalies_none PASSED [ 44%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_anomaly_detector_detect_anomalies_found PASSED [ 48%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_anomaly_detector_calculate_severity PASSED [ 51%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_anomaly_detector_to_dict PASSED [ 55%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_init FAILED [ 59%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_initialize_default_knowledge PASSED [ 62%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_add_components PASSED [ 66%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_generate_test PASSED [ 70%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_detect_anomalies PASSED [ 74%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_get_model_by_capability FAILED [ 77%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_measure_dimensions PASSED [ 81%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_quantum_entangle PASSED [ 85%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_quantum_collapse FAILED [ 88%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_save_to_file PASSED [ 92%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_load_from_file PASSED [ 96%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_create_quantum_ai_knowledge_model PASSED [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_quantum_ai_model_init __________________________\n\n    def test_quantum_ai_model_init():\n        \"\"\"Test initialization of QuantumAIKnowledgeModel.\"\"\"\n        model = QuantumAIKnowledgeModel()\n>       assert model.models == {}\nE       AssertionError: assert {'CausalityNe...nhanced=True)} == {}\nE         \nE         Left contains 3 more items:\nE         {'CausalityNet': AIModel(name='CausalityNet',\nE                                  description='Causal reasoning engine for '\nE                                              'understanding test failures',\nE                                  model_type=<AIModelType.NEURO_SYMBOLIC: 'neuro_symbolic'>,\nE                                  capabilities=[<AICapability.CAUSAL_REASONING: 'causal_reasoning'>,...\nE         \nE         ...Full output truncated (119 lines hidden), use '-vv' to show\n\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py:297: AssertionError\n________________ test_quantum_ai_model_get_model_by_capability _________________\n\nquantum_ai_model = <src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumAIKnowledgeModel object at 0x107f2e7b0>\nai_model = AIModel(name='TestModel', description='A test model', model_type=<AIModelType.HYBRID_CLASSICAL_QUANTUM: 'hybrid_classi...parameters={'temperature': 0.7}, confidence_threshold=0.7, last_training=None, fine_tuned=False, quantum_enhanced=True)\n\n    def test_quantum_ai_model_get_model_by_capability(quantum_ai_model, ai_model):\n        \"\"\"Test getting models by capability.\"\"\"\n        result = quantum_ai_model.get_ai_model_by_capability(AICapability.TEST_SYNTHESIS)\n>       assert len(result) == 1\nE       AssertionError: assert 2 == 1\nE        +  where 2 = len([AIModel(name='CyberTest-GPT', description='Advanced test generation model specializing in Python and TypeScript', model_type=<AIModelType.HYBRID_CLASSICAL_QUANTUM: 'hybrid_classical_quantum'>, capabilities=[<AICapability.TEST_SYNTHESIS: 'test_synthesis'>, <AICapability.CODE_GENERATION: 'code_generation'>, <AICapability.PATTERN_RECOGNITION: 'pattern_recognition'>], version='1.2.0', accuracy=0.89, training_data_description='15M test cases across 500K projects, with emphasis on Discord bots', parameters={'temperature': 0.7, 'max_tokens': 2048}, confidence_threshold=0.7, last_training=None, fine_tuned=False, quantum_enhanced=True), AIModel(name='TestModel', description='A test model', model_type=<AIModelType.HYBRID_CLASSICAL_QUANTUM: 'hybrid_classical_quantum'>, capabilities=[<AICapability.TEST_SYNTHESIS: 'test_synthesis'>, <AICapability.CODE_GENERATION: 'code_generation'>], version='1.0.0', accuracy=0.85, training_data_description='Test data', parameters={'temperature': 0.7}, confidence_threshold=0.7, last_training=None, fine_tuned=False, quantum_enhanced=True)])\n\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py:357: AssertionError\n____________________ test_quantum_ai_model_quantum_collapse ____________________\n\nquantum_ai_model = <src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumAIKnowledgeModel object at 0x107f0a450>\n\n    def test_quantum_ai_model_quantum_collapse(quantum_ai_model):\n        \"\"\"Test quantum collapse.\"\"\"\n        # Start in superposition\n        assert quantum_ai_model.system_state == QuantumState.SUPERPOSITION\n    \n        # Collapse\n>       with patch.object(QuantumDimension, \"historical_values\", [5.0]):\n\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py:380: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x107f0b350>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <class 'src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumDimension'> does not have the attribute 'historical_values'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError\n- generated xml file: /Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src/omega_bot_farm/qa/tests/reports/quantum_test_report_20250405_085344_unit.xml -\n- Generated html report: file:///Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src/omega_bot_farm/qa/tests/reports/quantum_test_report_20250405_085344_unit.html -\n=========================== short test summary info ============================\nFAILED src/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_init\nFAILED src/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_get_model_by_capability\nFAILED src/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py::test_quantum_ai_model_quantum_collapse\n========================= 3 failed, 24 passed in 1.26s =========================\n",
      "error_output": "",
      "execution_time": 1.7759039402008057,
      "returncode": 1
    },
    "integration": {
      "success": false,
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- /Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src/omega_bot_farm/qa/venv/bin/python3.13\ncachedir: .pytest_cache\nmetadata: {'Python': '3.13.2', 'Platform': 'macOS-15.3.1-arm64-arm-64bit-Mach-O', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.5.0'}, 'Plugins': {'html': '4.1.1', 'metadata': '3.1.1', 'cov': '6.1.0'}, 'AWS_REGION': 'us-east-1'}\nrootdir: /Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src\nconfigfile: pytest.ini\nplugins: html-4.1.1, metadata-3.1.1, cov-6.1.0\ncollecting ... collected 7 items\n\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_integration.py::test_dimension_measurement_affects_anomaly_detection FAILED [ 14%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_integration.py::test_quantum_entanglement_and_collapse_workflow PASSED [ 28%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_integration.py::test_test_generation_uses_dimensions FAILED [ 42%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_integration.py::test_model_persistence_roundtrip PASSED [ 57%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_integration.py::test_cross_component_interaction PASSED [ 71%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_integration.py::test_capability_based_model_selection FAILED [ 85%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_integration.py::test_multiple_language_support PASSED [100%]\n\n=================================== FAILURES ===================================\n_____________ test_dimension_measurement_affects_anomaly_detection _____________\n\nai_model = <src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumAIKnowledgeModel object at 0x110d1bcb0>\n\n    def test_dimension_measurement_affects_anomaly_detection(ai_model):\n        \"\"\"Test that dimension measurements affect anomaly detection.\"\"\"\n        # First detect anomalies in good code\n        good_results = ai_model.detect_code_anomalies(SAMPLE_GOOD_CODE)\n    \n        # Then detect anomalies in bad code\n        bad_results = ai_model.detect_code_anomalies(SAMPLE_BAD_CODE)\n    \n        # There should be more anomalies in the bad code\n>       assert len(bad_results) >= len(good_results)\nE       AssertionError: assert 0 >= 1\nE        +  where 0 = len([])\nE        +  and   1 = len([{'dimension': 'bug_potential', 'expected_range': {'max': 40, 'min': 0}, 'quantum_state': 'COLLAPSED', 'severity': 'CRITICAL', ...}])\n\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_integration.py:64: AssertionError\n_____________________ test_test_generation_uses_dimensions _____________________\n\nai_model = <src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumAIKnowledgeModel object at 0x110e99d10>\n\n    def test_test_generation_uses_dimensions(ai_model):\n        \"\"\"Test that test generation uses quantum dimensions.\"\"\"\n        # Patch the measure method to track calls\n        with patch(\"src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumDimension.measure\") as mock_measure:\n            mock_measure.return_value = 5.0  # Return a fixed value for predictability\n    \n            # Generate a test\n            test_code = ai_model.generate_test(SAMPLE_GOOD_CODE)\n    \n            # The measure method should have been called at least once\n>           assert mock_measure.called\nE           AssertionError: assert False\nE            +  where False = <MagicMock name='measure' id='4578838576'>.called\n\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_integration.py:96: AssertionError\n____________________ test_capability_based_model_selection _____________________\n\nai_model = <src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumAIKnowledgeModel object at 0x110e9dd00>\n\n    def test_capability_based_model_selection(ai_model):\n        \"\"\"Test selecting models based on capabilities.\"\"\"\n        # Get models with test synthesis capability\n        test_models = ai_model.get_ai_model_by_capability(AICapability.TEST_SYNTHESIS)\n    \n        # Get models with anomaly detection capability\n        anomaly_models = ai_model.get_ai_model_by_capability(AICapability.ANOMALY_DETECTION)\n    \n        # There should be at least one model for each capability\n>       assert len(test_models) > 0\nE       assert 0 > 0\nE        +  where 0 = len([])\n\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_integration.py:157: AssertionError\n- generated xml file: /Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src/omega_bot_farm/qa/tests/reports/quantum_test_report_20250405_085344_integration.xml -\n- Generated html report: file:///Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src/omega_bot_farm/qa/tests/reports/quantum_test_report_20250405_085344_integration.html -\n=========================== short test summary info ============================\nFAILED src/omega_bot_farm/qa/tests/test_quantum_ai_integration.py::test_dimension_measurement_affects_anomaly_detection\nFAILED src/omega_bot_farm/qa/tests/test_quantum_ai_integration.py::test_test_generation_uses_dimensions\nFAILED src/omega_bot_farm/qa/tests/test_quantum_ai_integration.py::test_capability_based_model_selection\n========================= 3 failed, 4 passed in 0.09s ==========================\n",
      "error_output": "",
      "execution_time": 0.2736399173736572,
      "returncode": 1
    },
    "performance": {
      "success": true,
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- /Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src/omega_bot_farm/qa/venv/bin/python3.13\ncachedir: .pytest_cache\nmetadata: {'Python': '3.13.2', 'Platform': 'macOS-15.3.1-arm64-arm-64bit-Mach-O', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.5.0'}, 'Plugins': {'html': '4.1.1', 'metadata': '3.1.1', 'cov': '6.1.0'}, 'AWS_REGION': 'us-east-1'}\nrootdir: /Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src\nconfigfile: pytest.ini\nplugins: html-4.1.1, metadata-3.1.1, cov-6.1.0\ncollecting ... collected 6 items\n\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_performance.py::test_model_initialization_time PASSED [ 16%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_performance.py::test_test_generation_performance PASSED [ 33%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_performance.py::test_anomaly_detection_performance PASSED [ 50%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_performance.py::test_memory_usage PASSED [ 66%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_performance.py::test_model_save_load_performance PASSED [ 83%]\nsrc/omega_bot_farm/qa/tests/test_quantum_ai_performance.py::test_parallel_dimensional_analysis PASSED [100%]\n\n- generated xml file: /Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src/omega_bot_farm/qa/tests/reports/quantum_test_report_20250405_085344_performance.xml -\n- Generated html report: file:///Users/fsiqueira/Desktop/GitHub/omega-btc-ai/src/omega_bot_farm/qa/tests/reports/quantum_test_report_20250405_085344_performance.html -\n============================== 6 passed in 2.38s ===============================\n",
      "error_output": "",
      "execution_time": 2.5697598457336426,
      "returncode": 0
    }
  }
}