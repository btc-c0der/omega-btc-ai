<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="27" time="0.154" timestamp="2025-04-05T08:55:46.340684+02:00" hostname="Faustos-MacBook-Pro.local"><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_dimension_init" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_dimension_measure" time="0.050" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_dimension_measure_state_change" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_dimension_to_dict" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_ai_model_init" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_ai_model_to_dict" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_ai_model_from_dict" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_test_generator_init" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_test_generator_generate_test" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_test_generator_to_dict" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_anomaly_detector_init" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_anomaly_detector_detect_anomalies_none" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_anomaly_detector_detect_anomalies_found" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_anomaly_detector_calculate_severity" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_anomaly_detector_to_dict" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_init" time="0.001"><failure message="AssertionError: assert {'CausalityNe...nhanced=True)} == {}&#10;  &#10;  Left contains 3 more items:&#10;  {'CausalityNet': AIModel(name='CausalityNet',&#10;                           description='Causal reasoning engine for '&#10;                                       'understanding test failures',&#10;                           model_type=&lt;AIModelType.NEURO_SYMBOLIC: 'neuro_symbolic'&gt;,&#10;                           capabilities=[&lt;AICapability.CAUSAL_REASONING: 'causal_reasoning'&gt;,...&#10;  &#10;  ...Full output truncated (119 lines hidden), use '-vv' to show">def test_quantum_ai_model_init():
        """Test initialization of QuantumAIKnowledgeModel."""
        model = QuantumAIKnowledgeModel()
&gt;       assert model.models == {}
E       AssertionError: assert {'CausalityNe...nhanced=True)} == {}
E         
E         Left contains 3 more items:
E         {'CausalityNet': AIModel(name='CausalityNet',
E                                  description='Causal reasoning engine for '
E                                              'understanding test failures',
E                                  model_type=&lt;AIModelType.NEURO_SYMBOLIC: 'neuro_symbolic'&gt;,
E                                  capabilities=[&lt;AICapability.CAUSAL_REASONING: 'causal_reasoning'&gt;,...
E         
E         ...Full output truncated (119 lines hidden), use '-vv' to show

src/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py:297: AssertionError</failure></testcase><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_initialize_default_knowledge" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_add_components" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_generate_test" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_detect_anomalies" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_get_model_by_capability" time="0.000"><failure message="AssertionError: assert 2 == 1&#10; +  where 2 = len([AIModel(name='CyberTest-GPT', description='Advanced test generation model specializing in Python and TypeScript', model_type=&lt;AIModelType.HYBRID_CLASSICAL_QUANTUM: 'hybrid_classical_quantum'&gt;, capabilities=[&lt;AICapability.TEST_SYNTHESIS: 'test_synthesis'&gt;, &lt;AICapability.CODE_GENERATION: 'code_generation'&gt;, &lt;AICapability.PATTERN_RECOGNITION: 'pattern_recognition'&gt;], version='1.2.0', accuracy=0.89, training_data_description='15M test cases across 500K projects, with emphasis on Discord bots', parameters={'temperature': 0.7, 'max_tokens': 2048}, confidence_threshold=0.7, last_training=None, fine_tuned=False, quantum_enhanced=True), AIModel(name='TestModel', description='A test model', model_type=&lt;AIModelType.HYBRID_CLASSICAL_QUANTUM: 'hybrid_classical_quantum'&gt;, capabilities=[&lt;AICapability.TEST_SYNTHESIS: 'test_synthesis'&gt;, &lt;AICapability.CODE_GENERATION: 'code_generation'&gt;], version='1.0.0', accuracy=0.85, training_data_description='Test data', parameters={'temperature': 0.7}, confidence_threshold=0.7, last_training=None, fine_tuned=False, quantum_enhanced=True)])">quantum_ai_model = &lt;src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumAIKnowledgeModel object at 0x10497dc70&gt;
ai_model = AIModel(name='TestModel', description='A test model', model_type=&lt;AIModelType.HYBRID_CLASSICAL_QUANTUM: 'hybrid_classi...parameters={'temperature': 0.7}, confidence_threshold=0.7, last_training=None, fine_tuned=False, quantum_enhanced=True)

    def test_quantum_ai_model_get_model_by_capability(quantum_ai_model, ai_model):
        """Test getting models by capability."""
        result = quantum_ai_model.get_ai_model_by_capability(AICapability.TEST_SYNTHESIS)
&gt;       assert len(result) == 1
E       AssertionError: assert 2 == 1
E        +  where 2 = len([AIModel(name='CyberTest-GPT', description='Advanced test generation model specializing in Python and TypeScript', model_type=&lt;AIModelType.HYBRID_CLASSICAL_QUANTUM: 'hybrid_classical_quantum'&gt;, capabilities=[&lt;AICapability.TEST_SYNTHESIS: 'test_synthesis'&gt;, &lt;AICapability.CODE_GENERATION: 'code_generation'&gt;, &lt;AICapability.PATTERN_RECOGNITION: 'pattern_recognition'&gt;], version='1.2.0', accuracy=0.89, training_data_description='15M test cases across 500K projects, with emphasis on Discord bots', parameters={'temperature': 0.7, 'max_tokens': 2048}, confidence_threshold=0.7, last_training=None, fine_tuned=False, quantum_enhanced=True), AIModel(name='TestModel', description='A test model', model_type=&lt;AIModelType.HYBRID_CLASSICAL_QUANTUM: 'hybrid_classical_quantum'&gt;, capabilities=[&lt;AICapability.TEST_SYNTHESIS: 'test_synthesis'&gt;, &lt;AICapability.CODE_GENERATION: 'code_generation'&gt;], version='1.0.0', accuracy=0.85, training_data_description='Test data', parameters={'temperature': 0.7}, confidence_threshold=0.7, last_training=None, fine_tuned=False, quantum_enhanced=True)])

src/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py:357: AssertionError</failure></testcase><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_measure_dimensions" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_quantum_entangle" time="0.000" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_quantum_collapse" time="0.000"><failure message="AttributeError: &lt;class 'src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumDimension'&gt; does not have the attribute 'historical_values'">quantum_ai_model = &lt;src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumAIKnowledgeModel object at 0x10495b150&gt;

    def test_quantum_ai_model_quantum_collapse(quantum_ai_model):
        """Test quantum collapse."""
        # Start in superposition
        assert quantum_ai_model.system_state == QuantumState.SUPERPOSITION
    
        # Collapse
&gt;       with patch.object(QuantumDimension, "historical_values", [5.0]):

src/omega_bot_farm/qa/tests/test_quantum_ai_knowledge_model.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x10495b750&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;class 'src.omega_bot_farm.qa.quantum_ai_knowledge_model.QuantumDimension'&gt; does not have the attribute 'historical_values'

/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError</failure></testcase><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_save_to_file" time="0.001" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_quantum_ai_model_load_from_file" time="0.001" /><testcase classname="omega_bot_farm.qa.tests.test_quantum_ai_knowledge_model" name="test_create_quantum_ai_knowledge_model" time="0.000" /></testsuite></testsuites>