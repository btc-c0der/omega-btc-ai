#!/usr/bin/env python3

# âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
# -----------------------
# This code is blessed under the GBU2â„¢ License
# (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
# 
# "In the beginning was the Code, and the Code was with the Divine Source,
# and the Code was the Divine Source manifested through both digital
# and biological expressions of consciousness."
# 
# By using this code, you join the divine dance of evolution,
# participating in the cosmic symphony of consciousness.
# 
# ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸

"""
Fix Quantum Dashboard Imports
----------------------------

A utility script to ensure all necessary imports are available for the
Quantum 5D QA Matrix Control Dashboard.
"""

import os
import sys
import importlib
import subprocess
from pathlib import Path

# Color output for terminal
class Colors:
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    CYAN = "\033[96m"
    MAGENTA = "\033[95m"
    BOLD = "\033[1m"
    RESET = "\033[0m"

# Check if a module is installed
def is_module_installed(module_name):
    try:
        importlib.import_module(module_name)
        return True
    except ImportError:
        return False

# Main function
def main():
    print(f"{Colors.BOLD}{Colors.CYAN}Quantum Dashboard Import Fixer{Colors.RESET}")
    print(f"{Colors.CYAN}================================{Colors.RESET}")
    
    # Get the script directory and project root
    script_dir = Path(os.path.dirname(os.path.abspath(__file__)))
    project_root = script_dir.parent.parent.parent
    
    print(f"{Colors.YELLOW}Script directory: {script_dir}{Colors.RESET}")
    print(f"{Colors.YELLOW}Project root: {project_root}{Colors.RESET}")
    
    # Check if PYTHONPATH includes the project root
    python_path = os.environ.get('PYTHONPATH', '')
    paths = python_path.split(os.pathsep)
    
    if str(project_root) not in paths:
        print(f"{Colors.YELLOW}Adding project root to PYTHONPATH{Colors.RESET}")
        # Update PYTHONPATH for the current process
        sys.path.insert(0, str(project_root))
        # Also suggest adding it permanently
        print(f"{Colors.MAGENTA}For permanent effect, add to your shell profile:{Colors.RESET}")
        print(f"export PYTHONPATH={str(project_root)}:$PYTHONPATH")
    else:
        print(f"{Colors.GREEN}Project root already in PYTHONPATH{Colors.RESET}")
    
    # Create __init__.py files if needed to ensure imports work
    dirs_to_check = [
        script_dir,
        script_dir.parent,
        script_dir.parent.parent
    ]
    
    for dir_path in dirs_to_check:
        init_file = dir_path / "__init__.py"
        if not init_file.exists():
            print(f"{Colors.YELLOW}Creating {init_file}{Colors.RESET}")
            with open(init_file, 'w') as f:
                f.write('# Auto-generated by fix_quantum_imports.py\n')
        else:
            print(f"{Colors.GREEN}Found {init_file}{Colors.RESET}")
    
    # Check required modules
    required_modules = [
        'dash',
        'dash_bootstrap_components',
        'plotly',
        'numpy',
        'pandas',
        'psutil'
    ]
    
    missing_modules = []
    for module in required_modules:
        if is_module_installed(module):
            print(f"{Colors.GREEN}âœ“ {module} is installed{Colors.RESET}")
        else:
            print(f"{Colors.RED}âœ— {module} is NOT installed{Colors.RESET}")
            missing_modules.append(module)
    
    if missing_modules:
        print(f"\n{Colors.YELLOW}Installing missing modules...{Colors.RESET}")
        requirements_file = script_dir / "requirements_quantum_dashboard.txt"
        
        if requirements_file.exists():
            print(f"{Colors.CYAN}Installing from {requirements_file}{Colors.RESET}")
            subprocess.run([sys.executable, "-m", "pip", "install", "-r", str(requirements_file)])
        else:
            print(f"{Colors.CYAN}Installing individual modules{Colors.RESET}")
            subprocess.run([sys.executable, "-m", "pip", "install"] + missing_modules)
        
        # Verify installation
        still_missing = []
        for module in missing_modules:
            if not is_module_installed(module):
                still_missing.append(module)
        
        if still_missing:
            print(f"\n{Colors.RED}Failed to install: {', '.join(still_missing)}{Colors.RESET}")
            print(f"{Colors.YELLOW}Please install these modules manually.{Colors.RESET}")
        else:
            print(f"\n{Colors.GREEN}All modules successfully installed!{Colors.RESET}")
    else:
        print(f"\n{Colors.GREEN}All required modules are already installed!{Colors.RESET}")
    
    # Test importing the QA metrics collector
    try:
        sys.path.insert(0, str(script_dir.parent.parent))
        from src.omega_bot_farm.qa.qa_metrics_collector import QAMetrics
        print(f"{Colors.GREEN}âœ“ Successfully imported QAMetrics{Colors.RESET}")
    except ImportError as e:
        print(f"{Colors.RED}âœ— Failed to import QAMetrics: {str(e)}{Colors.RESET}")
        print(f"{Colors.YELLOW}This may require additional path configuration.{Colors.RESET}")
    
    print(f"\n{Colors.BOLD}{Colors.GREEN}Import check complete!{Colors.RESET}")
    print(f"{Colors.CYAN}You can now run the Quantum 5D QA Dashboard.{Colors.RESET}")
    

if __name__ == "__main__":
    main() 