name: Cloud Deployment to Scaleway

on:
  push:
    branches: [ cloud-docker-setup ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export Docker images
        run: |
          mkdir -p docker-images
          
          # Build Trap Probability Meter image
          docker build -t trap-probability-meter:${{ github.sha }} -f docker/TrapProbabilityMeter.Dockerfile .
          docker save trap-probability-meter:${{ github.sha }} > docker-images/trap-probability-meter.tar
          
          # Build Trap Aware Traders image
          docker build -t trap-aware-traders:${{ github.sha }} -f docker/TrapAwareTraders.Dockerfile .
          docker save trap-aware-traders:${{ github.sha }} > docker-images/trap-aware-traders.tar
          
          # Build Divine Dashboard image
          docker build -t divine-dashboard:${{ github.sha }} -f docker/DivineDashboard.Dockerfile .
          docker save divine-dashboard:${{ github.sha }} > docker-images/divine-dashboard.tar

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp docker-compose.scaleway.yml deployment/
          cp .env.scaleway.example deployment/
          cp install_on_scaleway.sh deployment/
          cp deploy_to_scaleway.sh deployment/
          cp test_redis_connection.sh deployment/
          cp CLOUD_DEPLOYMENT.md deployment/
          cp -r docker deployment/
          
          # Create version file with commit info
          echo "${{ github.sha }}" > deployment/VERSION
          echo "Branch: ${{ github.ref_name }}" >> deployment/VERSION
          echo "Build Date: $(date)" >> deployment/VERSION
          
          # Create archive
          tar -czf omega-btc-ai-deployment.tar.gz -C deployment .
        
      - name: Upload deployment package as artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: omega-btc-ai-deployment.tar.gz
          retention-days: 5

  deploy:
    needs: build
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/cloud-docker-setup'
    runs-on: ubuntu-latest
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v3
        with:
          name: deployment-package
          
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SCALEWAY_SSH_KEY }}
          known_hosts: ${{ secrets.SCALEWAY_KNOWN_HOSTS }}
          if_key_exists: replace
          
      - name: Deploy to Scaleway
        env:
          SCALEWAY_HOST: ${{ secrets.SCALEWAY_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          API_KEY: ${{ secrets.BITGET_API_KEY }}
          API_SECRET: ${{ secrets.BITGET_API_SECRET }}
          API_PASSPHRASE: ${{ secrets.BITGET_API_PASSPHRASE }}
        run: |
          # Transfer deployment package
          scp omega-btc-ai-deployment.tar.gz root@$SCALEWAY_HOST:/opt/
          
          # Execute deployment commands
          ssh root@$SCALEWAY_HOST << EOF
            # Create directory if it doesn't exist
            mkdir -p /opt/omega-btc-ai
            
            # Extract package
            cd /opt/omega-btc-ai
            tar -xzf /opt/omega-btc-ai-deployment.tar.gz
            
            # Make scripts executable
            chmod +x *.sh
            
            # Create .env.scaleway file
            cat > .env.scaleway << ENVEOF
          # OMEGA BTC AI - Scaleway Deployment Configuration
          # Generated by GitHub Actions deployment

          # Redis Configuration
          REDIS_HOST=172.16.8.2
          REDIS_PORT=6379
          REDIS_PASSWORD=$REDIS_PASSWORD

          # Trading Configuration
          USE_TESTNET=true
          SYMBOL=BTCUSDT
          LONG_CAPITAL=24.0
          SHORT_CAPITAL=24.0
          TRAP_PROBABILITY_THRESHOLD=0.7
          TRAP_ALERT_THRESHOLD=0.8
          ENABLE_TRAP_PROTECTION=true
          ENABLE_ELITE_EXITS=true
          ELITE_EXIT_CONFIDENCE=0.7

          # BitGet API Keys
          API_KEY=$API_KEY
          API_SECRET=$API_SECRET
          API_PASSPHRASE=$API_PASSPHRASE

          # Debug and Monitoring
          DEBUG=false
          LOG_LEVEL=info
          ENVEOF
            
            # Run deployment script
            ./deploy_to_scaleway.sh
          EOF

      - name: Notify deployment status
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Deployment to Scaleway ${{ job.status }}!'
          SLACK_TITLE: Deployment Status
          SLACK_USERNAME: GitHub Actions 