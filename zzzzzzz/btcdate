#!/bin/bash
# 
# OMEGA BTC AI - Divine BTC Date Decoder CLI
# ==========================================
#
# A command-line interface for the BTC Date Decoder.
#
# Copyright (C) 2024 OMEGA BTC AI Team
# License: GNU General Public License v3.0
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# JAH BLESS the eternal flow of time and markets.

# Get the directory where the script is located
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
PROJECT_ROOT="$SCRIPT_DIR"
CONFIG_FILE="$HOME/.config/omega-btc-ai/btcdate.conf"
DEFAULT_DIVINE_SEARCH_DAYS=30
DIVINE_SCORE_THRESHOLD=0.7
DATE_FORMAT="%Y-%m-%d %H:%M:%S %Z"

# Load configuration if exists
if [ -f "$CONFIG_FILE" ]; then
    # Source the config file
    source "$CONFIG_FILE"
fi

# Help message
show_help() {
    echo -e "\033[1;33mOMEGA BTC AI\033[0m - \033[1;36mDivine BTC Date Decoder\033[0m"
    echo -e "\033[3mJAH BLESS the eternal flow of time and markets\033[0m\n"
    echo -e "Usage:"
    echo -e "  \033[1mbtcdate\033[0m                    - Analyze current date"
    echo -e "  \033[1mbtcdate today\033[0m              - Analyze current date"
    echo -e "  \033[1mbtcdate YYYY-MM-DD\033[0m         - Analyze specific date"
    echo -e "  \033[1mbtcdate special\033[0m            - Analyze October 29, 2023 (special date)"
    echo -e "  \033[1mbtcdate help\033[0m               - Show this help message"
    echo -e "  \033[1mbtcdate interactive\033[0m        - Run in interactive mode with rich display"
    echo -e "  \033[1mbtcdate score YYYY-MM-DD\033[0m   - Show only divine score for date"
    echo -e "  \033[1mbtcdate next-divine [days]\033[0m - Find next divine date (within days)"
    echo -e "  \033[1mbtcdate config\033[0m             - Show current configuration"
    echo
}

# Show configuration
show_config() {
    echo -e "\033[1;33mOMEGA BTC AI\033[0m - \033[1;36mBTC Date Decoder Configuration\033[0m"
    echo -e "Configuration file: $CONFIG_FILE"
    echo -e "Settings:"
    echo -e "  Project Root: $PROJECT_ROOT"
    echo -e "  Default Divine Search Days: $DEFAULT_DIVINE_SEARCH_DAYS"
    echo -e "  Divine Score Threshold: $DIVINE_SCORE_THRESHOLD"
    echo -e "  Date Format: $DATE_FORMAT"
    echo
    if [ ! -f "$CONFIG_FILE" ]; then
        echo -e "\033[1;31mNote:\033[0m Configuration file not found. Using default settings."
        echo -e "Run install_btcdate.sh to create the configuration file."
    fi
}

# Check if Python and the required libraries are available
check_requirements() {
    if ! command -v python3 &> /dev/null; then
        echo "Python 3 is required but not installed."
        exit 1
    fi
    
    # Check if required Python packages are installed
    python3 -c "import pytz, rich" 2>/dev/null
    if [ $? -ne 0 ]; then
        echo "Required Python packages are missing. Installing..."
        pip install pytz rich python-dateutil
    fi
}

# Generate a minimal report for a specific date
generate_minimal_report() {
    DATE="$1"
    python3 -c "
import sys
from datetime import datetime
import pytz
sys.path.append('$PROJECT_ROOT')
try:
    from omega_ai.utils.btc_date_decoder import analyze_date
    if '$DATE' == 'today':
        result = analyze_date()
    else:
        result = analyze_date(date_str='$DATE')
    
    print(f'\033[1;36mDate:\033[0m {result[\"date_str\"]}')
    print(f'\033[1;32mBitcoin Age:\033[0m {result[\"btc_age\"][\"years\"]} years, {result[\"btc_age\"][\"months\"]} months, {result[\"btc_age\"][\"days\"]} days')
    print(f'\033[1;35mHalving Cycle:\033[0m {result[\"halving_phase\"][\"cycle_name\"]}')
    print(f'\033[1;35mProgress:\033[0m {result[\"halving_phase\"][\"percentage_complete\"]:.1f}%')
    print(f'\033[1;33mDivine Date Score:\033[0m {result[\"divine_date_score\"]:.4f}')
    print(f'\033[1;33mRating:\033[0m {result[\"divine_date_rating\"]}')
    
    # Get the primary market cycle phase
    primary_cycle = result[\"market_cycles\"][\"primary\"]
    print(f'\033[1;34mPrimary Market Cycle Phase:\033[0m {primary_cycle[\"phase_description\"]}')
    
    # Print temporal harmony
    harmony = result[\"time_alignment\"][\"overall_temporal_harmony\"]
    print(f'\033[1;36mTemporal Harmony:\033[0m {harmony*100:.1f}% - {result[\"time_alignment\"][\"harmony_description\"]}')
    
except ImportError as e:
    print(f'\033[1;31mError:\033[0m Could not import BTC Date Decoder module: {e}')
    print('Make sure you are running this command from the OMEGA BTC AI project directory.')
    sys.exit(1)
except Exception as e:
    print(f'\033[1;31mError:\033[0m {str(e)}')
    sys.exit(1)
"
}

# Find next divine date
find_next_divine_date() {
    MAX_DAYS=${1:-$DEFAULT_DIVINE_SEARCH_DAYS}
    python3 -c "
import sys
from datetime import datetime, timedelta
import pytz
sys.path.append('$PROJECT_ROOT')
try:
    from omega_ai.utils.btc_date_decoder import analyze_date
    
    print(f'\033[1;33mSearching for divine dates in the next {$MAX_DAYS} days...\033[0m')
    print()
    
    today = datetime.now(pytz.UTC)
    divine_dates = []
    
    # Search for divine dates
    for i in range(1, $MAX_DAYS + 1):
        future_date = today + timedelta(days=i)
        result = analyze_date(timestamp=future_date)
        score = result['divine_date_score']
        
        if score > $DIVINE_SCORE_THRESHOLD:  # Consider divine if score > threshold
            divine_dates.append((future_date, score, result['divine_date_rating']))
            
    # Sort by score
    divine_dates.sort(key=lambda x: x[1], reverse=True)
    
    if divine_dates:
        print(f'\033[1;32mFound {len(divine_dates)} divine dates:\033[0m')
        for date, score, rating in divine_dates:
            print(f'\033[1;36m{date.strftime(\"$DATE_FORMAT\")}:\033[0m {score:.4f} - {rating}')
        
        # Most divine date
        best_date, best_score, best_rating = divine_dates[0]
        print()
        print(f'\033[1;33mMost divine date: \033[1;32m{best_date.strftime(\"$DATE_FORMAT\")} ({best_rating})\033[0m')
        print(f'This date is {(best_date - today).days} days from now.')
    else:
        print('\033[1;31mNo divine dates found in the specified range.\033[0m')
        print('Try increasing the search range.')
    
except ImportError as e:
    print(f'\033[1;31mError:\033[0m Could not import BTC Date Decoder module: {e}')
    print('Make sure you are running this command from the OMEGA BTC AI project directory.')
    sys.exit(1)
except Exception as e:
    print(f'\033[1;31mError:\033[0m {str(e)}')
    sys.exit(1)
"
}

# Generate score only for a date
generate_score_only() {
    DATE="$1"
    python3 -c "
import sys
from datetime import datetime
import pytz
sys.path.append('$PROJECT_ROOT')
try:
    from omega_ai.utils.btc_date_decoder import analyze_date
    if '$DATE' == 'today':
        result = analyze_date()
    else:
        result = analyze_date(date_str='$DATE')
    
    score = result['divine_date_score']
    rating = result['divine_date_rating']
    print(f'\033[1;36m{result[\"date_str\"]}:\033[0m \033[1;33m{score:.4f}\033[0m - \033[1;32m{rating}\033[0m')
    
except ImportError as e:
    print(f'\033[1;31mError:\033[0m Could not import BTC Date Decoder module: {e}')
    print('Make sure you are running this command from the OMEGA BTC AI project directory.')
    sys.exit(1)
except Exception as e:
    print(f'\033[1;31mError:\033[0m {str(e)}')
    sys.exit(1)
"
}

# Main logic
check_requirements

# Process command-line arguments
if [ $# -eq 0 ]; then
    # No arguments - analyze current date
    generate_minimal_report "today"
else
    case "$1" in
        help|--help|-h)
            show_help
            ;;
        today)
            generate_minimal_report "today"
            ;;
        special)
            # Run the special analysis for October 29, 2023
            python3 "$PROJECT_ROOT/btc_date_decoder_example.py" <<< "n"
            ;;
        interactive)
            # Run the full interactive example
            python3 "$PROJECT_ROOT/btc_date_decoder_example.py"
            ;;
        score)
            if [ -z "$2" ]; then
                generate_score_only "today"
            else
                generate_score_only "$2"
            fi
            ;;
        next-divine)
            if [ -z "$2" ]; then
                find_next_divine_date "$DEFAULT_DIVINE_SEARCH_DAYS"
            else
                find_next_divine_date "$2"
            fi
            ;;
        config)
            show_config
            ;;
        *)
            # Assume it's a date in YYYY-MM-DD format
            if [[ "$1" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                generate_minimal_report "$1"
            else
                echo -e "\033[1;31mError:\033[0m Invalid date format. Use YYYY-MM-DD format."
                echo
                show_help
                exit 1
            fi
            ;;
    esac
fi

exit 0 