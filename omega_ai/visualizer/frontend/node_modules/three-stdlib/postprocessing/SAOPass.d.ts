/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

import {
  Scene,
  Camera,
  Material,
  MeshDepthMaterial,
  MeshNormalMaterial,
  ShaderMaterial,
  Color,
  Vector2,
  WebGLRenderer,
  WebGLRenderTarget,
} from 'three'

import { Pass, FullScreenQuad } from './Pass'

export enum OUTPUT {
  Beauty,
  Default,
  SAO,
  Depth,
  Normal,
}

export interface SAOPassParams {
  output: OUTPUT
  saoBias: number
  saoIntensity: number
  saoScale: number
  saoKernelRadius: number
  saoMinResolution: number
  saoBlur: boolean
  saoBlurRadius: number
  saoBlurStdDev: number
  saoBlurDepthCutoff: number
}

export class SAOPass extends Pass {
  constructor(scene: Scene, camera: Camera, depthTexture?: boolean, useNormals?: boolean, resolution?: Vector2)
  scene: Scene
  camera: Camera
  supportsDepthTextureExtension: boolean
  supportsNormalTexture: boolean
  originalClearColor: Color
  oldClearColor: Color
  oldClearAlpha: number
  resolution: Vector2
  saoRenderTarget: WebGLRenderTarget
  blurIntermediateRenderTarget: WebGLRenderTarget
  beautyRenderTarget: WebGLRenderTarget
  normalRenderTarget: WebGLRenderTarget
  depthRenderTarget: WebGLRenderTarget
  depthMaterial: MeshDepthMaterial
  normalMaterial: MeshNormalMaterial
  saoMaterial: ShaderMaterial
  vBlurMaterial: ShaderMaterial
  hBlurMaterial: ShaderMaterial
  materialCopy: ShaderMaterial
  depthCopy: ShaderMaterial
  fsQuad: FullScreenQuad
  params: SAOPassParams

  static OUTPUT: typeof OUTPUT

  renderPass(
    renderer: WebGLRenderer,
    passMaterial: Material,
    renderTarget: WebGLRenderTarget,
    clearColor?: Color | string | number,
    clearAlpha?: number,
  ): void
  renderOverride(
    renderer: WebGLRenderer,
    overrideMaterial: Material,
    renderTarget: WebGLRenderTarget,
    clearColor?: Color | string | number,
    clearAlpha?: number,
  ): void
}
