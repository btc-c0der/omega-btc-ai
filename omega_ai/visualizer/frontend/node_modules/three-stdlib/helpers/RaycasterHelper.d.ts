/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

/**
 * from https://github.com/gsimone/things/tree/main/packages/three-raycaster-helper
 */
import { BufferGeometry, InstancedMesh, Intersection, Line, LineBasicMaterial, Mesh, MeshBasicMaterial, Object3D, Raycaster, SphereGeometry } from 'three';
declare class RaycasterHelper extends Object3D {
    numberOfHitsToVisualize: number;
    raycaster: Raycaster;
    hits: Intersection[];
    origin: Mesh<SphereGeometry, MeshBasicMaterial>;
    near: Line<BufferGeometry, LineBasicMaterial>;
    far: Line<BufferGeometry, LineBasicMaterial>;
    nearToFar: Line<BufferGeometry, LineBasicMaterial>;
    originToNear: Line<BufferGeometry, LineBasicMaterial>;
    hitPoints: InstancedMesh;
    colors: {
        near: number;
        far: number;
        originToNear: number;
        nearToFar: number;
        origin: number[];
    };
    constructor(raycaster: Raycaster, numberOfHitsToVisualize?: number);
    setColors: (colors?: Partial<{
        near: number;
        far: number;
        originToNear: number;
        nearToFar: number;
        origin: number[];
    }> | undefined) => void;
    update: () => void;
    dispose: () => void;
}
export { RaycasterHelper };
