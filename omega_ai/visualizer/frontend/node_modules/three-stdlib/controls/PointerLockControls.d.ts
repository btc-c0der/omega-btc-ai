/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

import { Camera, Vector3 } from 'three';
import { EventDispatcher } from './EventDispatcher';
export interface PointerLockControlsEventMap {
    /**
     * Fires when the user moves the mouse.
     */
    change: {};
    /**
     * Fires when the pointer lock status is "locked" (in other words: the mouse is captured).
     */
    lock: {};
    /**
     * Fires when the pointer lock status is "unlocked" (in other words: the mouse is not captured anymore).
     */
    unlock: {};
}
declare class PointerLockControls extends EventDispatcher<PointerLockControlsEventMap> {
    camera: Camera;
    domElement?: HTMLElement;
    isLocked: boolean;
    minPolarAngle: number;
    maxPolarAngle: number;
    pointerSpeed: number;
    constructor(camera: Camera, domElement?: HTMLElement);
    private onMouseMove;
    private onPointerlockChange;
    private onPointerlockError;
    connect: (domElement: HTMLElement) => void;
    disconnect: () => void;
    dispose: () => void;
    getObject: () => Camera;
    private direction;
    getDirection: (v: Vector3) => Vector3;
    moveForward: (distance: number) => void;
    moveRight: (distance: number) => void;
    lock: () => void;
    unlock: () => void;
}
export { PointerLockControls };
