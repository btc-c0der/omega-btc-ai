/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

import { Camera } from 'three';
import { EventDispatcher } from './EventDispatcher';
export interface FlyControlsEventMap {
    /**
     * Fires when the camera has been transformed by the controls.
     */
    change: {};
}
declare class FlyControls extends EventDispatcher<FlyControlsEventMap> {
    object: Camera;
    domElement: HTMLElement | Document;
    movementSpeed: number;
    rollSpeed: number;
    dragToLook: boolean;
    autoForward: boolean;
    private changeEvent;
    private EPS;
    private tmpQuaternion;
    private mouseStatus;
    private movementSpeedMultiplier;
    private moveState;
    private moveVector;
    private rotationVector;
    constructor(object: Camera, domElement?: HTMLElement | Document);
    private keydown;
    private keyup;
    private pointerdown;
    private pointermove;
    private pointerup;
    private lastQuaternion;
    private lastPosition;
    update: (delta: number) => void;
    private updateMovementVector;
    private updateRotationVector;
    private getContainerDimensions;
    connect: (domElement: HTMLElement | Document) => void;
    dispose: () => void;
}
export { FlyControls };
