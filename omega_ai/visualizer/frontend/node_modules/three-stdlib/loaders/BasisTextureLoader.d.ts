/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

import { Loader, CompressedTexture, LoadingManager, WebGLRenderer } from 'three'

export class BasisTextureLoader extends Loader {
  constructor(manager?: LoadingManager)
  transcoderBinary: ArrayBuffer | null
  transcoderPath: string
  transcoderPending: Promise<void> | null

  workerConfig: {
    format: number
    astcSupported: boolean
    etcSupported: boolean
    dxtSupported: boolean
    pvrtcSupported: boolean
  }
  workerLimit: number
  workerNextTaskID: number
  workerPool: object[]
  workerSourceURL: string

  detectSupport(renderer: WebGLRenderer): this
  load(
    url: string,
    onLoad: (texture: CompressedTexture) => void,
    onProgress?: (event: ProgressEvent) => void,
    onError?: (event: ErrorEvent) => void,
  ): void
  loadAsync(url: string, onProgress?: (event: ProgressEvent) => void): Promise<CompressedTexture>
  setTranscoderPath(path: string): this
  setWorkerLimit(workerLimit: number): this
  dispose(): void
}
