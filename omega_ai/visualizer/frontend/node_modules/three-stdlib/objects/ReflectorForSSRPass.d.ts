/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

import { Mesh, ShaderMaterial, WebGLRenderTarget, BufferGeometry, WebGLRenderer, Scene, Camera, IUniform } from 'three'

export interface ReflectorShader {
  defines: {
    DISTANCE_ATTENUATION: boolean
    FRESNEL: boolean
  }
  uniforms: {
    [key: string]: IUniform
  }
  vertexShader: string
  fragmentShader: string
}

export interface ReflectorForSSRPassOptions {
  clipBias?: number | undefined
  textureWidth?: number | undefined
  textureHeight?: number | undefined
  color?: number | undefined
  useDepthTexture?: boolean | undefined
  shader?: ReflectorShader | undefined
}

export class ReflectorForSSRPass<TGeometry extends BufferGeometry = BufferGeometry> extends Mesh<TGeometry> {
  type: 'ReflectorForSSRPass'
  options: ReflectorForSSRPassOptions

  static ReflectorShader: ReflectorShader

  needsUpdate: boolean
  maxDistance: number
  opacity: number

  get distanceAttenuation(): boolean
  set distanceAttenuation(val: boolean)
  get fresnel(): boolean
  set fresnel(val: boolean)

  material: ShaderMaterial

  renderTarget: WebGLRenderTarget

  constructor(geometry: TGeometry, options: ReflectorForSSRPassOptions)

  doRender: (renderer: WebGLRenderer, scene: Scene, camera: Camera) => void

  getRenderTarget: () => WebGLRenderTarget
}
