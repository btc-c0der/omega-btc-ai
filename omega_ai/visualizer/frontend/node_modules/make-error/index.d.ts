/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

/**
 * Create a new error constructor instance.
 */
declare function makeError(
  name: string
): makeError.Constructor<makeError.BaseError>;

/**
 * Set the constructor prototype to `BaseError`.
 */
declare function makeError<T extends Error>(super_: {
  new (...args: any[]): T;
}): makeError.Constructor<T & makeError.BaseError>;

/**
 * Create a specialized error instance.
 */
declare function makeError<T extends Error, K>(
  name: string | Function,
  super_: K
): K & makeError.SpecializedConstructor<T>;

declare namespace makeError {
  /**
   * Use with ES2015+ inheritance.
   */
  export class BaseError extends Error {
    message: string;
    name: string;
    stack: string;

    constructor(message?: string);
  }

  export interface Constructor<T> {
    new (message?: string): T;
    super_: any;
    prototype: T;
  }

  export interface SpecializedConstructor<T> {
    super_: any;
    prototype: T;
  }
}

export = makeError;
