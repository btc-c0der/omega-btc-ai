/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

import {
    Camera,
    Color,
    ColorRepresentation,
    DataTexture,
    Material,
    MeshNormalMaterial,
    Scene,
    ShaderMaterial,
    Vector3,
    WebGLRenderer,
    WebGLRenderTarget,
} from "../../../src/Three.js";

import { FullScreenQuad, Pass } from "./Pass.js";

export enum SSAOPassOUTPUT {
    Default,
    SSAO,
    Blur,
    Depth,
    Normal,
}

export class SSAOPass extends Pass {
    constructor(scene: Scene, camera: Camera, width?: number, height?: number, kernelSize?: number);
    scene: Scene;
    camera: Camera;
    width: number;
    height: number;
    clear: boolean;
    kernelRadius: number;
    kernel: Vector3[];
    noiseTexture: DataTexture;
    output: SSAOPassOUTPUT;
    minDistance: number;
    maxDistance: number;
    normalRenderTarget: WebGLRenderTarget;
    ssaoRenderTarget: WebGLRenderTarget;
    blurRenderTarget: WebGLRenderTarget;
    ssaoMaterial: ShaderMaterial;
    normalMaterial: MeshNormalMaterial;
    blurMaterial: ShaderMaterial;
    depthRenderMaterial: ShaderMaterial;
    copyMaterial: ShaderMaterial;
    fsQuad: FullScreenQuad;
    originalClearColor: Color;

    static OUTPUT: typeof SSAOPassOUTPUT;

    dipose(): void;
    generateSampleKernel(kernelSize: number): Vector3[];
    generateRandomKernelRotations(): void;
    renderPass(
        renderer: WebGLRenderer,
        passMaterial: Material,
        renderTarget: WebGLRenderTarget,
        clearColor?: ColorRepresentation,
        clearAlpha?: number,
    ): void;
    renderOverride(
        renderer: WebGLRenderer,
        overrideMaterial: Material,
        renderTarget: WebGLRenderTarget,
        clearColor?: ColorRepresentation,
        clearAlpha?: number,
    ): void;
}
