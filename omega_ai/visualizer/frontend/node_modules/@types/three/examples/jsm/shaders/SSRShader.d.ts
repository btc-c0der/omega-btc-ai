/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

import { IUniform, Matrix4, Texture, Vector2 } from "../../../src/Three.js";
/**
 * References:
 * https://lettier.github.io/3d-game-shaders-for-beginners/screen-space-reflection.html
 */

export const SSRShader: SSRShader;
export interface SSRShader {
    name: string;
    defines: {
        MAX_STEP: number;
        isPerspectiveCamera: boolean;
        isDistanceAttenuation: boolean;
        isFresnel: boolean;
        isInfiniteThick: boolean;
        isSelective: boolean;
    };
    uniforms: {
        tDiffuse: IUniform<Texture | null>;
        tNormal: IUniform<Texture | null>;
        tMetalness: IUniform<Texture | null>;
        tDepth: IUniform<Texture | null>;
        cameraNear: IUniform<number>;
        cameraFar: IUniform<number>;
        resolution: IUniform<Vector2>;
        cameraProjectionMatrix: IUniform<Matrix4>;
        cameraInverseProjectionMatrix: IUniform<Matrix4>;
        opacity: IUniform<number>;
        maxDistance: IUniform<number>;
        cameraRange: IUniform<number>;
        thickness: IUniform<number>;
    };
    vertexShader: string;
    fragmentShader: string;
}

export const SSRDepthShader: SSRDepthShader;
export interface SSRDepthShader {
    name: string;
    defines: {
        PERSPECTIVE_CAMERA: number;
    };
    uniforms: {
        tDepth: IUniform<Texture | null>;
        cameraNear: IUniform<number>;
        cameraFar: IUniform<number>;
    };
    vertexShader: string;
    fragmentShader: string;
}

export const SSRBlurShader: SSRBlurShader;
export interface SSRBlurShader {
    name: string;
    uniforms: {
        tDiffuse: IUniform<Texture | null>;
        resolution: IUniform<Vector2>;
        opacity: IUniform<number>;
    };
    vertexShader: string;
    fragmentShader: string;
}
