/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

import { WorkboxEventTarget } from './WorkboxEventTarget.js';
import '../_version.js';
/**
 * A minimal `Event` subclass shim.
 * This doesn't *actually* subclass `Event` because not all browsers support
 * constructable `EventTarget`, and using a real `Event` will error.
 * @private
 */
export declare class WorkboxEvent<K extends keyof WorkboxEventMap> {
    type: K;
    target?: WorkboxEventTarget;
    sw?: ServiceWorker;
    originalEvent?: Event;
    isExternal?: boolean;
    constructor(type: K, props: Omit<WorkboxEventMap[K], 'target' | 'type'>);
}
export interface WorkboxMessageEvent extends WorkboxEvent<'message'> {
    data: any;
    originalEvent: Event;
    ports: readonly MessagePort[];
}
export interface WorkboxLifecycleEvent extends WorkboxEvent<keyof WorkboxLifecycleEventMap> {
    isUpdate?: boolean;
}
export interface WorkboxLifecycleWaitingEvent extends WorkboxLifecycleEvent {
    wasWaitingBeforeRegister?: boolean;
}
export interface WorkboxLifecycleEventMap {
    installing: WorkboxLifecycleEvent;
    installed: WorkboxLifecycleEvent;
    waiting: WorkboxLifecycleWaitingEvent;
    activating: WorkboxLifecycleEvent;
    activated: WorkboxLifecycleEvent;
    controlling: WorkboxLifecycleEvent;
    redundant: WorkboxLifecycleEvent;
}
export interface WorkboxEventMap extends WorkboxLifecycleEventMap {
    message: WorkboxMessageEvent;
}
