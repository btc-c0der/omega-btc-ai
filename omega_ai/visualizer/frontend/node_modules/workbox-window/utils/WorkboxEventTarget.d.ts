/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

import { WorkboxEvent, WorkboxEventMap } from './WorkboxEvent.js';
export type ListenerCallback = (event: WorkboxEvent<any>) => any;
/**
 * A minimal `EventTarget` shim.
 * This is necessary because not all browsers support constructable
 * `EventTarget`, so using a real `EventTarget` will error.
 * @private
 */
export declare class WorkboxEventTarget {
    private readonly _eventListenerRegistry;
    /**
     * @param {string} type
     * @param {Function} listener
     * @private
     */
    addEventListener<K extends keyof WorkboxEventMap>(type: K, listener: (event: WorkboxEventMap[K]) => any): void;
    /**
     * @param {string} type
     * @param {Function} listener
     * @private
     */
    removeEventListener<K extends keyof WorkboxEventMap>(type: K, listener: (event: WorkboxEventMap[K]) => any): void;
    /**
     * @param {Object} event
     * @private
     */
    dispatchEvent(event: WorkboxEvent<any>): void;
    /**
     * Returns a Set of listeners associated with the passed event type.
     * If no handlers have been registered, an empty Set is returned.
     *
     * @param {string} type The event type.
     * @return {Set<ListenerCallback>} An array of handler functions.
     * @private
     */
    private _getEventListenersByType;
}
