/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

import type { Rule } from 'eslint';

import type ModuleCache from './ModuleCache';
import type { ESLintSettings } from './types';

export type ResultNotFound = { found: false, path?: undefined };
export type ResultFound = { found: true, path: string | null };
export type ResolvedResult = ResultNotFound | ResultFound;

export type ResolverResolve = (modulePath: string, sourceFile:string, config: unknown) => ResolvedResult;
export type ResolverResolveImport = (modulePath: string, sourceFile:string, config: unknown) => string | undefined;
export type Resolver = { interfaceVersion?: 1 | 2, resolve: ResolverResolve, resolveImport: ResolverResolveImport };

declare function resolve(
    p: string,
    context: Rule.RuleContext,
): ResolvedResult['path'];

export default resolve;

declare function fileExistsWithCaseSync(
    filepath: string | null,
    cacheSettings: ESLintSettings,
    strict: boolean
): boolean | ReturnType<typeof ModuleCache.prototype.get>;

declare function relative(modulePath: string, sourceFile: string, settings: ESLintSettings): ResolvedResult['path'];


export { fileExistsWithCaseSync, relative };
