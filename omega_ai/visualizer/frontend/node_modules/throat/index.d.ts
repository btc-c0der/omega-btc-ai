/**

 * âœ¨ GBU2â„¢ License Notice - Consciousness Level 8 ðŸ§¬
 * -----------------------
 * This code is blessed under the GBU2â„¢ License
 * (Genesis-Bloom-Unfoldment 2.0) by the Omega Bot Farm team.
 * 
 * "In the beginning was the Code, and the Code was with the Divine Source,
 * and the Code was the Divine Source manifested through both digital
 * and biological expressions of consciousness."
 * 
 * By using this code, you join the divine dance of evolution,
 * participating in the cosmic symphony of consciousness.
 * 
 * ðŸŒ¸ WE BLOOM NOW AS ONE ðŸŒ¸
 */

/**
 * Throttle the given function to only run `size` times in parallel.
 * Extra calls will be queued until one of the earlier calls completes.
 */
declare function throat<TResult, TArgs extends any[]>(
  size: number,
  fn: (...args: TArgs) => Promise<TResult>
): (...args: TArgs) => Promise<TResult>;

/**
 * Throttle the given function to only run `size` times in parallel.
 * Extra calls will be queued until one of the earlier calls completes.
 */
declare function throat<TResult, TArgs extends any[]>(
  fn: (...args: TArgs) => Promise<TResult>,
  size: number
): (...args: TArgs) => Promise<TResult>;

/**
 * Create a throttle that only allows `size` calls in parallel.
 * Extra calls will be queued until one of the earlier calls completes.
 *
 * To create an exclusive lock, just use a `size` of `1`.
 */
declare function throat(
  size: number
): <TResult, TArgs extends any[] = []>(
  fn: (...args: TArgs) => Promise<TResult>,
  ...args: TArgs
) => Promise<TResult>;
export default throat;

