version: '3.8'

# üî± OMEGA BTC AI - Divine Orchestrator üî±

services:
  # üåü NGINX Gateway
  nginx:
    image: nginx:alpine
    container_name: omega_nginx
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./infra/ng1n1x/conf.d:/etc/nginx/conf.d
      - ./infra/ng1n1x/ssl:/etc/nginx/ssl
    networks:
      - ${DOCKER_NETWORK}
    depends_on:
      - matrix-news
      - consciousness
    healthcheck:
      test: [ "CMD", "nginx", "-t" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '${NGINX_CPU_LIMIT}'
          memory: ${NGINX_MEMORY_LIMIT}
    restart: unless-stopped

  # üåå Matrix News Service
  matrix-news:
    build:
      context: ../matrix-news-integration
      dockerfile: src/Dockerfile
    container_name: omega_matrix_news
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - NEWS_SERVICE_URL=${NEWS_SERVICE_URL}
      - CONSCIOUSNESS_SERVICE_URL=${CONSCIOUSNESS_SERVICE_URL}
      - LOG_LEVEL=${LOG_LEVEL}
    networks:
      - ${DOCKER_NETWORK}
    depends_on:
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${MATRIX_NEWS_PORT}/health" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üß† Consciousness Service
  consciousness:
    build:
      context: ../matrix-news-integration
      dockerfile: src/Dockerfile.consciousness
    container_name: omega_consciousness
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL}
    networks:
      - ${DOCKER_NETWORK}
    depends_on:
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${CONSCIOUSNESS_PORT}/health" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üî• Redis
  redis:
    image: redis:alpine
    container_name: omega_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üåê Temporal Worker
  temporal-worker:
    build:
      context: ../matrix-news-integration
      dockerfile: temporal/Dockerfile.websocket
    container_name: omega_temporal_worker
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL}
    networks:
      - ${DOCKER_NETWORK}
    depends_on:
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${TEMPORAL_PORT}/health" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

networks:
  ${DOCKER_NETWORK}:
    driver: bridge

volumes:
  redis_data:
    driver: local
