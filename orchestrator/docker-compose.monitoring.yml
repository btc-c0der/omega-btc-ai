# üî± OMEGA BTC AI - Divine Monitoring Environment üî±

version: '3.8'

services:
  # üìä Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: omega_prometheus
    volumes:
      - ./infra/monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üìà Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: omega_grafana
    volumes:
      - ./infra/monitoring/grafana:/var/lib/grafana
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - ${DOCKER_NETWORK}
    depends_on:
      - prometheus
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üîç Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: omega_jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "${JAEGER_UI_PORT}:16686"
      - "${JAEGER_COLLECTOR_PORT}:14250"
    volumes:
      - jaeger_data:/var/lib/jaeger
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:16686/api/traces" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üìä Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: omega_node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "${NODE_EXPORTER_PORT}:9100"
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:9100/metrics" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üìä cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: omega_cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "${CADVISOR_PORT}:8080"
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:8080/healthz" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üö® Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: omega_alertmanager
    volumes:
      - ./infra/monitoring/alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "${ALERTMANAGER_PORT}:9093"
    networks:
      - ${DOCKER_NETWORK}
    depends_on:
      - prometheus
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:9093/-/healthy" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  alertmanager_data:
    driver: local
