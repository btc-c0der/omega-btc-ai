# üî± OMEGA BTC AI - Divine Security Environment üî±

version: '3.8'

services:
  # üõ°Ô∏è WAF (Web Application Firewall)
  waf:
    image: owasp/modsecurity-crs:nginx
    container_name: omega_waf
    volumes:
      - ./infra/security/waf:/etc/nginx/modsecurity
      - ./infra/security/waf/rules:/etc/nginx/modsecurity/rules
    ports:
      - "${WAF_PORT}:80"
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "nginx", "-t" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üîç Security Scanner
  security-scanner:
    image: aquasec/trivy:latest
    container_name: omega_security_scanner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./infra/security/trivy:/root/.cache/trivy
    command: server --listen 0.0.0.0:${TRIVY_PORT}
    ports:
      - "${TRIVY_PORT}:8080"
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:${TRIVY_PORT}/health" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üîê Vault
  vault:
    image: hashicorp/vault:latest
    container_name: omega_vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "${VAULT_PORT}:8200"
    volumes:
      - vault_data:/vault/data
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "vault", "status" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üîí Cert Manager
  cert-manager:
    image: jetstack/cert-manager-controller:v1.12.0
    container_name: omega_cert_manager
    volumes:
      - ./infra/security/certs:/etc/certs
    environment:
      - ACME_EMAIL=${CERT_MANAGER_EMAIL}
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "cert-manager", "version" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üõ°Ô∏è Falco
  falco:
    image: falcosecurity/falco:latest
    container_name: omega_falco
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./infra/security/falco:/etc/falco
    environment:
      - FALCO_JSON_OUTPUT=true
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "falco", "--version" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

  # üîç OWASP ZAP
  zap:
    image: owasp/zap2docker-stable:latest
    container_name: omega_zap
    ports:
      - "${ZAP_PORT}:8080"
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/JSON/core/view/version/" ]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        limits:
          cpus: '${SERVICE_CPU_LIMIT}'
          memory: ${SERVICE_MEMORY_LIMIT}
    restart: unless-stopped

volumes:
  vault_data:
    driver: local
