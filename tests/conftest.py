"""
Unified test configuration for OMEGA BTC AI
This file was automatically generated by consolidate_tests.py
"""

from datetime import datetime, timedelta
from fastapi import FastAPI
from fastapi.testclient import TestClient
from httpx import AsyncClient
from omega_ai.utils.redis_manager import RedisManager
from pathlib import Path
from typing import Dict, List, Any, AsyncGenerator
from unittest.mock import Mock, MagicMock
import fakeredis
import json
import numpy as np
import os
import pytest
import random
import redis
import sys
import tempfile

# Import the server conditionally to avoid breaking other tests
try:
    from omega_ai.visualizer.backend.src.mm_trap_visualizer.server import MMTrapVisualizerServer
except ImportError:
    MMTrapVisualizerServer = None

@pytest.fixture
def mock_redis():
    """Fixture to provide a fake Redis server for testing"""
    server = fakeredis.FakeServer()
    redis_client = fakeredis.FakeRedis(server=server, decode_responses=True)
    yield redis_client

@pytest.fixture
def mock_redis_with_data(mock_redis):
    """Fixture to provide a fake Redis server with sample BTC price data"""
    # Add current BTC price
    mock_redis.set("last_btc_price", "85000")
    mock_redis.set("last_btc_volume", "120.5")
    mock_redis.set("last_btc_update_time", str(datetime.now().timestamp()))
    
    # Add BTC price history
    base_price = 85000
    for i in range(50):
        # Add some random variation
        price_change = random.uniform(-200, 200)
        price = base_price + price_change
        # Add to history
        mock_redis.rpush("btc_movement_history", price)
        mock_redis.rpush("btc_volume_history", random.uniform(50, 150))
    
    # Add some fake traps
    trap_types = ["Bull Trap", "Bear Trap", "Liquidity Grab", "Stop Hunt", "Fake Pump"]
    for i in range(5):
        trap = {
            "type": random.choice(trap_types),
            "confidence": random.uniform(0.6, 0.9),
            "price": random.uniform(84000, 86000),
            "timestamp": (datetime.now() - timedelta(minutes=i*5)).isoformat()
        }
        mock_redis.lpush("recent_mm_traps", json.dumps(trap))
    
    yield mock_redis

@pytest.fixture
def sample_price_data():
    """Fixture to provide sample BTC price data"""
    base_price = 85000
    timestamps = []
    prices = []
    volumes = []
    
    now = datetime.now()
    
    for i in range(100):
        price_change = random.uniform(-500, 500) if i % 10 == 0 else random.uniform(-100, 100)
        price = base_price + price_change
        volume = random.uniform(50, 150)
        timestamp = now - timedelta(minutes=i*5)
        
        timestamps.append(timestamp)
        prices.append(price)
        volumes.append(volume)
    
    return {
        "timestamps": timestamps,
        "prices": prices,
        "volumes": volumes
    }

@pytest.fixture
def mock_btc_live_feed_data():
    """Fixture for mocking data produced by btc_live_feed.py"""
    prices = []
    volumes = []
    timestamps = []
    
    now = datetime.now()
    
    for i in range(100):
        timestamp = now - timedelta(minutes=i)
        price = 85000 * (1 + random.uniform(-0.01, 0.01))
        volume = random.uniform(1, 10)
        
        prices.append(price)
        volumes.append(volume)
        timestamps.append(timestamp)
    
    return {
        "prices": prices,
        "volumes": volumes,
        "timestamps": timestamps
    }

@pytest.fixture
def mock_trap_data():
    """Fixture for providing sample market maker trap data"""
    trap_types = ["Bull Trap", "Bear Trap", "Liquidity Grab", "Stop Hunt", "Fake Pump", "Fake Dump"]
    traps = [
        {
            "id": str(i),
            "type": random.choice(trap_types),
            "confidence": random.uniform(0.5, 0.95),
            "price": 85000 * (1 + random.uniform(-0.03, 0.03)),
            "volume": random.uniform(1.2, 3.0),
            "timestamp": (datetime.now() - timedelta(hours=random.randint(0, 48))),
            "description": f"Test trap {i}",
            "success": random.choice([True, False])
        }
        for i in range(10)
    ]
    return {"traps": traps}

@pytest.fixture
def setup_mock_redis_data(mock_redis):
    """Setup mock data in Redis for blessed testing."""
    # Mock data setup logic here
    pass

@pytest.fixture
def redis_manager():
    """Create a mock Redis manager."""
    manager = Mock(spec=RedisManager)
    manager.get_cached.return_value = mock_trap_data()
    return manager

@pytest.fixture
def server(redis_manager):
    """Create a test server instance."""
    if MMTrapVisualizerServer is None:
        pytest.skip("MMTrapVisualizerServer not available - skipping visualizer tests")
    try:
        return MMTrapVisualizerServer("Test MM Trap Visualizer", redis_manager)
    except Exception as e:
        pytest.skip(f"Failed to create MMTrapVisualizerServer: {str(e)} - skipping visualizer tests")

@pytest.fixture
def client(server):
    """Create a test client."""
    return TestClient(server.app)

@pytest.fixture
async def async_client(server):
    """Create an async test client."""
    async with AsyncClient(base_url="http://test", transport=server.app) as client:
        yield client

def pytest_configure(config):
    """Configure pytest with custom markers."""
    config.addinivalue_line(
        "markers",
        "integration: mark test as an integration test"
    )
    config.addinivalue_line(
        "markers",
        "unit: mark test as a unit test"
    )
    config.addinivalue_line(
        "markers",
        "asyncio: mark test as an async test"
    ) 